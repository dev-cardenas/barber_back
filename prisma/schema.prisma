// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user               String           @id @default(uuid())
  name                  String?
  last_name             String?
  hours_available       String?
  email                 String           @unique
  phone                 String?
  image                 String?
  token                 String?
  gender                String?
  whatsapp              String?
  city                  String?
  country               String?
  lat                   String?
  lng                   String?
  is_blocked            Boolean          @default(false)
  password_hash         String
  is_delete             Boolean          @default(false)
  created_at            DateTime         @default(now())
  update_at             DateTime         @updatedAt
  // relationship
  roles                 UserRole[]
  permissions           UserPermission[]
  user_company          Company?         @relation(fields: [company_id], references: [id_company])
  company_id            String?
  notifications         Notification[]
  type_user             TypeUser?        @relation(fields: [type_user_id], references: [id_type_user])
  type_user_id          String?
  appointments_client   Appointments[]   @relation("appointments_client")
  appointments_provider Appointments[]   @relation("appointments_provider")
  ruc_client            RucClient?
}

model RucClient {
  id_ruc_client String   @id @default(uuid())
  name          String
  ruc           String
  is_delete     Boolean  @default(false)
  created_at    DateTime @default(now())
  update_at     DateTime @updatedAt
  // relationship
  user          User     @relation(fields: [user_id], references: [id_user])
  user_id       String   @unique
}

model RucConfig {
  id_ruc_config       String               @id @default(uuid())
  ruc                 String
  sign_digital_date   DateTime
  version             String
  business_name       String
  fantasy_name        String
  // timbrado numero
  stamped_number      String
  // timbrado Fecha
  stamped_date        String
  // tipo contribuyente
  taxpayer_type       String
  // tipoRegimen
  regime_type         String
  is_delete           Boolean              @default(false)
  created_at          DateTime             @default(now())
  update_at           DateTime             @updatedAt
  // relationship
  economic_activities EconomicActivities[]
  establishments      Establishments[]
  company             Company              @relation(fields: [company_id], references: [id_company])
  company_id          String               @unique
}

model EconomicActivities {
  id_economic_activities String      @id @default(uuid())
  code                   String
  description            String
  is_delete              Boolean     @default(false)
  created_at             DateTime    @default(now())
  update_at              DateTime    @updatedAt
  // relationship
  ruc                    RucConfig[]
}

// see the doc https://www.npmjs.com/package/facturacionelectronicapy-xmlgen
model Establishments {
  id_establishments      String    @id @default(uuid())
  code                   String
  address                String
  address_one_street     String
  address_two_street     String
  house_number           String
  // "departamento" : 11,
  department             String
  // "departamentoDescripcion" : "ALTO PARANA",
  department_description String
  // "distrito" : 145,
  district               String
  // "distritoDescripcion" : "CIUDAD DEL ESTE",
  district_description   String
  // "ciudad" : 3432,
  city                   String
  // "ciudadDescripcion" : "PUERTO PTE.STROESSNER (MUNIC)",
  city_description       String
  // "telefono" : "0973-527155",
  phone                  String
  // "email" : "tips@tips.com.py, tips@gmail.com",
  email                  String
  // "denominacion" : "Sucursal 1",
  denomination           String
  is_delete              Boolean   @default(false)
  created_at             DateTime  @default(now())
  update_at              DateTime  @updatedAt
  // relationship
  ruc                    RucConfig @relation(fields: [ruc_id], references: [id_ruc_config])
  ruc_id                 String
}

model Appointments {
  id_appointments              String                   @id @default(uuid())
  date                         DateTime
  canceled_at                  DateTime?
  process                      String
  is_delete                    Boolean                  @default(false)
  created_at                   DateTime                 @default(now())
  update_at                    DateTime                 @updatedAt
  // relationship
  type_process_appointments    TypeProcessAppointments? @relation(fields: [type_process_appointments_id], references: [id_type_process_appointments])
  type_process_appointments_id String?
  client                       User?                    @relation("appointments_client", fields: [client_id], references: [id_user])
  client_id                    String?
  provider                     User?                    @relation("appointments_provider", fields: [provider_id], references: [id_user])
  provider_id                  String?
}

model TypeProcessAppointments {
  id_type_process_appointments String         @id @default(uuid())
  type                         String         @unique
  is_delete                    Boolean        @default(false)
  created_at                   DateTime       @default(now())
  update_at                    DateTime       @updatedAt
  // relationship
  appoiments                   Appointments[]
}

model TypeUser {
  id_type_user String   @id @default(uuid())
  type         String   @unique
  description  String?
  is_delete    Boolean  @default(false)
  created_at   DateTime @default(now())
  update_at    DateTime @updatedAt
  // relationship
  users        User[]
}

model Notification {
  id_notification   String   @id @default(uuid())
  title             String
  content           String?
  slug              String?
  read              Boolean  @default(false)
  is_delete         Boolean  @default(false)
  created_at        DateTime @default(now())
  update_at         DateTime @updatedAt
  // relationship
  norification_user User     @relation(fields: [user_id], references: [id_user])
  user_id           String
}

model UserRole {
  id_user_role String           @id @default(uuid())
  user_role    String           @unique
  description  String?
  is_delete    Boolean          @default(false)
  created_at   DateTime         @default(now())
  update_at    DateTime         @updatedAt
  // relationship
  permissions  UserPermission[]
  user         User[]
}

model UserPermission {
  id_user_permission String     @id @default(uuid())
  user_permission    String     @unique
  description        String?
  is_delete          Boolean    @default(false)
  created_at         DateTime   @default(now())
  update_at          DateTime   @updatedAt
  // relationship
  roles              UserRole[]
  user               User?      @relation(fields: [user_id], references: [id_user])
  user_id            String?
}

// aqui falta agregar sus horarios
model Schedule {
  id_schedule String   @id @default(uuid())
  hour_since  String?
  hour_until  String?
  name_day    String?
  is_delete   Boolean  @default(false)
  created_at  DateTime @default(now())
  update_at   DateTime @updatedAt
  // relationship
  company     Company  @relation(fields: [company_id], references: [id_company])
  company_id  String   @unique
}

model Company {
  id_company             String            @id @default(uuid())
  address                String?
  company_name           String            @unique
  description            String?
  slug                   String?
  city                   String
  country                String
  lat                    String?
  lng                    String?
  email                  String            @unique
  hours_available        Int
  link_instagram         String?
  link_twitter           String?
  link_facebook          String?
  payment_date           DateTime?
  notice_of_payment      DateTime?
  phone                  String?
  whatsapp               String?
  account_recovery_email String?
  payment_status         Boolean           @default(false)
  is_delete              Boolean           @default(false)
  created_at             DateTime          @default(now())
  update_at              DateTime          @updatedAt
  // relationship
  product                Product[]
  type_busisness         TypeBusisness[]
  users                  User[]
  products_base          ProductBase[]
  account_plan           AccountPlan       @relation(fields: [account_plan_id], references: [id_account_plan])
  account_plan_id        String
  tickets                Ticket[]
  ruc                    RucConfig?
  schedule               Schedule?
  clients                Client[]
  providers              Provider[]
  sales_record           Sale[]
  purchase_records       PurchaseRecords[]
  inventories            Inventory[]
  branch_office          BranchOffice[]
  stock                  Stock[]
  invoice                Invoice[]
  category               Category[]
  sub_category           SubCategory[]
}

model AccountPlan {
  id_account_plan String    @id @default(uuid())
  code            String    @unique
  name            String    @unique
  slug            String?
  description     String
  price           Int
  available_days  Int
  is_delete       Boolean   @default(false)
  created_at      DateTime  @default(now())
  update_at       DateTime  @updatedAt
  Company         Company[]
}

model TypeBusisness {
  id_type_busisness String    @id @default(uuid())
  type              String    @unique
  is_delete         Boolean   @default(false)
  created_at        DateTime  @default(now())
  update_at         DateTime  @updatedAt
  // relationship
  companies         Company[]
}

model TypeProduct {
  id_type_product String        @id @default(uuid())
  type            String        @unique
  is_delete       Boolean       @default(false)
  created_at      DateTime      @default(now())
  update_at       DateTime      @updatedAt
  product         Product[]
  product_base    ProductBase[]
}

model CoinType {
  id_coin_type String   @id @default(uuid())
  name         String   @unique
  symbol       String   @unique
  is_delete    Boolean  @default(false)
  created_at   DateTime @default(now())
  update_at    DateTime @updatedAt
}

model Product {
  id_product        String                  @id @default(uuid())
  barcode           String?                 @unique
  color             String?
  name              String
  hours_and_minutes String?
  // medida
  measure           String?
  size              String?
  weight            Int?
  // example g, kg
  type_weight       String?
  // litro
  liter             Int?
  price_cost        Int?
  price_sale        Int?
  price_promotion   Int?
  // Precio mayorista
  price_wholesaler  Int?
  product_code      String?                 @unique
  product_sku       String?
  images            String?
  erase_code        String?
  description       String?
  slug              String?
  tags              String?
  assessment        String?
  features          String?
  lote              String?
  is_public         Boolean                 @default(false)
  is_delete         Boolean                 @default(false)
  created_at        DateTime                @default(now())
  update_at         DateTime                @updatedAt
  // relationship
  sale_details      SaleDetail[]
  buy_details       PurchaseRecordsDetail[]
  brand             Brand?                  @relation(fields: [brand_id], references: [id_brand])
  brand_id          String?
  company           Company?                @relation(fields: [company_id], references: [id_company])
  company_id        String?
  categories        Category[]
  sub_categories    SubCategory[]
  base_product      ProductBase?            @relation(fields: [base_product_id], references: [id_product_base])
  base_product_id   String?
  history           ProductPriceHistory[]
  tax               Tax?                    @relation(fields: [tax_id], references: [id_tax])
  tax_id            String?
  type_product      TypeProduct?            @relation(fields: [type_product_id], references: [id_type_product])
  type_product_id   String?
  providers         Provider[]
  inventories       Inventory[]
}

model ProductBase {
  id_product_base   String                @id @default(uuid())
  barcode           String?               @unique
  color             String?
  name              String
  hours_and_minutes String?
  // medida
  measure           String?
  size              String?
  weight            Int?
  // example g, kg
  type_weight       String?
  // litro
  liter             Int?
  price_cost        Int?
  price_sale        Int?
  price_promotion   Int?
  // Precio mayorista
  price_wholesaler  Int?
  product_code      String?               @unique
  product_sku       String?
  images            String?
  erase_code        String?
  description       String?
  slug              String?
  tags              String?
  assessment        String?
  features          String?
  lote              String?
  is_delete         Boolean               @default(false)
  created_at        DateTime              @default(now())
  update_at         DateTime              @updatedAt
  // relationship
  brand             Brand?                @relation(fields: [brand_id], references: [id_brand])
  brand_id          String?
  company           Company?              @relation(fields: [company_id], references: [id_company])
  company_id        String?
  categories        Category[]
  sub_categories    SubCategory[]
  history           ProductPriceHistory[]
  tax               Tax?                  @relation(fields: [tax_id], references: [id_tax])
  tax_id            String?
  product           Product[]
  type_product      TypeProduct?          @relation(fields: [type_product_id], references: [id_type_product])
  type_product_id   String?
  providers         Provider[]
}

model Brand {
  id_brand      String        @id @default(uuid())
  name          String        @unique
  logo          String?
  is_delete     Boolean       @default(false)
  created_at    DateTime      @default(now())
  update_at     DateTime      @updatedAt
  // relationship
  products      Product[]
  products_base ProductBase[]
}

model Tax {
  id_tax        String        @id @default(uuid())
  percentage    String        @unique
  type          String
  slug          String?
  is_delete     Boolean       @default(false)
  created_at    DateTime      @default(now())
  update_at     DateTime      @updatedAt
  // relationship
  products      Product[]
  products_base ProductBase[]
}

model Deposit {
  id_deposit       String      @id @default(uuid())
  name             String
  description      String?
  main_street      String?
  secondary_street String?
  lat              String?
  lng              String?
  city             String?
  country          String?
  department       String?
  is_delete        Boolean     @default(false)
  created_at       DateTime    @default(now())
  update_at        DateTime    @updatedAt
  // relationship
  // stock            Stock?
  inventories      Inventory[]
}

model Inventory {
  id_inventory         String           @id @default(uuid())
  quantity             String
  min_quantity         Int?
  max_quantity         Int?
  is_delete            Boolean          @default(false)
  created_at           DateTime         @default(now())
  update_at            DateTime         @updatedAt
  // relationship
  deposit              Deposit          @relation(fields: [deposit_id], references: [id_deposit])
  deposit_id           String
  product              Product          @relation(fields: [product_id], references: [id_product])
  product_id           String
  inventory_section    InventorySection @relation(fields: [inventory_section_id], references: [id_inventory_section])
  inventory_section_id String
  company              Company          @relation(fields: [company_id], references: [id_company])
  company_id           String
  Stock                Stock[]
}

model InventorySection {
  id_inventory_section String      @id @default(uuid())
  name                 String
  is_delete            Boolean     @default(false)
  created_at           DateTime    @default(now())
  update_at            DateTime    @updatedAt
  Inventory            Inventory[]
}

model ProductPriceHistory {
  id_product_price_history String      @id @default(uuid())
  date                     DateTime
  name                     String?
  price_cost               Int?
  price_sale               Int?
  price_promotion          Int?
  slug                     String?
  is_delete                Boolean     @default(false)
  created_at               DateTime    @default(now())
  update_at                DateTime    @updatedAt
  // relationship
  product                  Product     @relation(fields: [product_id], references: [id_product])
  product_id               String
  product_base             ProductBase @relation(fields: [product_base_id], references: [id_product_base])
  product_base_id          String
}

model Category {
  id_category    String        @id @default(uuid())
  name           String
  slug           String?
  image          String?
  icon           String?
  is_delete      Boolean       @default(false)
  created_at     DateTime      @default(now())
  update_at      DateTime      @updatedAt
  // relationship
  products       Product[]
  products_base  ProductBase[]
  sub_categories SubCategory[]
  company        Company       @relation(fields: [company_id], references: [id_company])
  company_id     String
}

model SubCategory {
  id_sub_category String        @id @default(uuid())
  name            String
  slug            String?
  image           String?
  icon            String?
  is_delete       Boolean       @default(false)
  created_at      DateTime      @default(now())
  update_at       DateTime      @updatedAt
  // relationship
  products        Product[]
  products_base   ProductBase[]
  categories      Category[]
  company         Company       @relation(fields: [company_id], references: [id_company])
  company_id      String
}

model Invoice {
  id_invoice            String   @id @default(uuid())
  details               String?
  // Timbrado
  // debe ser obligatoriamente 8 numeros
  stamped               String?
  invoice_number        String?
  slug                  String?
  status                String?
  // inicio de vigencia
  beginning_of_validity DateTime
  // Valido hasta
  validity_date         DateTime
  // fecha de emisión
  date_of_issue         DateTime
  sub_total             Int
  total                 Int
  sale_condition        String
  tax_type              Int
  is_delete             Boolean  @default(false)
  created_at            DateTime @default(now())
  update_at             DateTime @updatedAt
  // relationship
  company               Company  @relation(fields: [company_id], references: [id_company])
  company_id            String
  sales                 Sale[]
}

model Provider {
  id_provider   String        @id @default(uuid())
  name          String
  business_name String?
  address       String?
  email         String?
  slug          String?
  ruc           String?
  ci            String?
  phone         String?
  whatsapp      String?
  is_delete     Boolean       @default(false)
  created_at    DateTime      @default(now())
  update_at     DateTime      @updatedAt
  // relationship
  products      Product[]
  products_base ProductBase[]
  company       Company       @relation(fields: [company_id], references: [id_company])
  company_id    String
}

model Sale {
  id_sale_record String       @id @default(uuid())
  address        String?
  is_canceled    Boolean      @default(false)
  is_delete      Boolean      @default(false)
  created_at     DateTime     @default(now())
  update_at      DateTime     @updatedAt
  // relationship
  sale_details   SaleDetail[]
  company        Company      @relation(fields: [company_id], references: [id_company])
  company_id     String
  client         Client       @relation(fields: [client_id], references: [id_client])
  client_id      String
  ticket         Ticket[]
  invoice        Invoice[]
}

model SaleDetail {
  id_sale_record_detail String   @id @default(uuid())
  price                 Int
  quantity              Int
  is_canceled           Boolean  @default(false)
  is_delete             Boolean  @default(false)
  created_at            DateTime @default(now())
  update_at             DateTime @updatedAt
  // relationship
  product               Product  @relation(fields: [product_id], references: [id_product])
  product_id            String
  sale_record           Sale     @relation(fields: [sale_record_id], references: [id_sale_record])
  sale_record_id        String
}

model Client {
  id_client  String   @id @default(uuid())
  name       String
  ruc        String?
  address    String?
  email      String?
  ci         String?
  phone      String?
  whatsapp   String?
  is_delete  Boolean  @default(false)
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt
  // relationship
  company    Company  @relation(fields: [company_id], references: [id_company])
  company_id String
  boughts    Sale[] // compró el cliente de la company
}

model Ticket {
  id_ticket      String   @id @default(uuid())
  is_canceled    Boolean  @default(false)
  is_delete      Boolean  @default(false)
  created_at     DateTime @default(now())
  update_at      DateTime @updatedAt
  // relationship
  company        Company  @relation(fields: [company_id], references: [id_company])
  company_id     String
  sale_record    Sale     @relation(fields: [sale_record_id], references: [id_sale_record])
  sale_record_id String
}

// registro de compra
model PurchaseRecords {
  id_pucharse_record String                  @id @default(uuid())
  address            String?
  is_canceled        Boolean                 @default(false)
  is_delete          Boolean                 @default(false)
  created_at         DateTime                @default(now())
  update_at          DateTime                @updatedAt
  // relationship
  details            PurchaseRecordsDetail[]
  company            Company                 @relation(fields: [company_id], references: [id_company])
  company_id         String
}

model PurchaseRecordsDetail {
  id_pucharse_record_detail String          @id @default(uuid())
  price                     Int
  quantity                  Int
  is_canceled               Boolean         @default(false)
  is_delete                 Boolean         @default(false)
  created_at                DateTime        @default(now())
  update_at                 DateTime        @updatedAt
  // relationship
  product                   Product         @relation(fields: [product_id], references: [id_product])
  product_id                String
  pucharse_record           PurchaseRecords @relation(fields: [pucharse_record_id], references: [id_pucharse_record])
  pucharse_record_id        String
}

model BranchOffice {
  id_branch_office String   @id @default(uuid())
  name             String
  description      String?
  direction        String?
  main_street      String?
  secondary_street String?
  lat              String?
  lng              String?
  city             String
  country          String
  department       String
  is_delete        Boolean  @default(false)
  created_at       DateTime @default(now())
  update_at        DateTime @updatedAt
  // relationship
  company          Company  @relation(fields: [company_id], references: [id_company])
  company_id       String
  stock            Stock[]
}

view Stock {
  id_stock         String       @id @default(uuid())
  quantity         Int
  min_quantity     Int?
  max_quantity     Int?
  company          Company      @relation(fields: [company_id], references: [id_company])
  company_id       String
  branch_office    BranchOffice @relation(fields: [branch_office_id], references: [id_branch_office])
  branch_office_id String
  inventory        Inventory    @relation(fields: [inventory_id], references: [id_inventory])
  inventory_id     String
}

// CREATE OR REPLACE VIEW stock AS
// SELECT
//     p.id AS producto_id,
//     p.nombre AS nombre_producto,
//     d.id AS deposito_id,
//     d.nombre AS nombre_deposito,
//     SUM(i.cantidad) AS cantidad_total
// FROM
//     productos p
// JOIN
//     inventario i ON p.id = i.producto_id
// JOIN
//     deposito d ON i.deposito_id = d.id
// GROUP BY
//     p.id, p.nombre, d.id, d.nombre;

// const prisma = new PrismaClient();

// async function calcularStock(productoId: number, sucursalId: number) {
//   const totalStock = await prisma.$queryRaw`
//     SELECT
//       ${productoId} AS producto_id,
//       ${sucursalId} AS sucursal_id,
//       SUM(cantidad) AS cantidad_total
//     FROM inventario
//     WHERE producto_id = ${productoId} AND sucursal_id = ${sucursalId}
//   `;

//   await prisma.stock.upsert({
//     where: {
//       producto_id_sucursal_id: {
//         producto_id,
//         sucursal_id,
//       },
//     },
//     update: {
//       cantidad_total: totalStock[0].cantidad_total || 0,
//     },
//     create: {
//       producto_id,
//       sucursal_id,
//       cantidad_total: totalStock[0].cantidad_total || 0,
//     },
//   });
// }

// // Ejemplo de uso:
// calcularStock(1, 2) // Calcular el stock del producto 1 en la sucursal 2
//   .catch((error) => {
//     console.error('Error:', error);
//   })
//   .finally(async () => {
//     await prisma.$disconnect();
//   });
